#!/bin/bash

#
#   Shell
#

shopt -s direxpand
set +H

colr() {
    if [ "$1" = '-1' ]; then
        tput sgr0
    else
        tput setaf "$1"
    fi
}

title='\e]0;\w - Alacritty\a'
export PS1="\[$(colr 5)\]\W \[$(colr -1)\]\$ \[$(echo -e "$title")\]"

#
#   Env
#

export GOPATH=/mnt/Portable/Programming/Go
export JAVA_HOME=/usr/lib64/openjdk-11
export QT_QPA_PLATFORMTHEME=qt5ct
export SPICETIFY_INSTALL='/home/adam/spicetify-cli'

#
#   Path
#

export PATH="$PATH":"$GOPATH/bin":"$JAVA_HOME/bin":"$SPICETIFY_INSTALL"

#
#   Aliases
#

alias ls='exa -stype'    # sort alphabetically and by type
alias ll='exa -stype -l' # the same, with more detail
alias lr='exa -rsmod'    # list recently modified files, newest first
alias open='xdg-open'
alias code='detach code-oss'
alias files='detach nautilus'

#
#   Locations
#

gospace="$GOPATH/src/github.com/barjoco"
usb='/mnt/Portable'
bks="$usb/Bookmarks"
docs="$usb/Documents"
pics="$usb/Pictures"
vids="$usb/Videos"
music="$usb/Music"
uni="$usb/Uni"
prog="$usb/Programming"
dls="$HOME/Downloads"
cfg="$HOME/.config"

alias home='cdr "$HOME"'
alias usb='cdr "$usb"'
alias bks='cdr "$bks"'
alias docs='cdr "$docs"'
alias pics='cdr "$pics"'
alias vids='cdr "$vids"'
alias music='cdr "$music"'
alias uni='cdr "$uni"'
alias prog='cdr "$prog"'
alias dls='cdr "$dls"'
alias cfg='cdr "$cfg"'


#
#   Functions
#

# check updates
chkup() {
    # eopkg
    echo -e "$(colr 6)Eopkg:$(colr -1)"
    eopkg lu
    echo
    # flatpak
    echo -e "$(colr 6)Flatpak:$(colr -1)"
    flatpak update
    echo
    # spicetify
    echo -e "$(colr 6)Spicetify:$(colr -1)"
    latest=$(curl -s https://api.github.com/repos/khanhas/spicetify-cli/releases/latest | jq -r '.tag_name')
    current="v$(spicetify -v)"
    test $latest = $current && echo 'Up to date.' || echo 'Needs updating.'
}

# change directory and show some recently modified files
cdr() {
    cd "$1"
    pwd
    echo
    echo -e "$(colr 6)Recently modified:$(colr -1)"
    lr --color=always | head
    echo
}

# run process detached
detach() {
    ("$@" >/dev/null 2>&1 &)
}

# run process detached then exit
detachx() {
    detach "$@" && exit >/dev/null 2>&1
}

# convert to pdf - use: topdf myfile.docx
topdf() {
    lowriter --convert-to pdf "$@"
}

# open in firefox - use: goto example.com
goto() {
    for x in "$@"; do
        detach firefox "$x"
    done
}

# search google in firefox - use: search foo bar baz
search() {
    detachx firefox "https://www.google.co.uk/search?q=$(echo "$@" | sed s/" "/+/g)"
}

# remove spaces from filenames - use: rmspaces *.pdf
rmspaces() {
    for f in "$@"; do
        dir=$(dirname "$f")
        bn=$(basename "$f")
        bnFormatted=$(echo "$bn" | tr " " _)

        mv "$f" "$dir/$bnFormatted"
    done
}

# zip directories - use: zipdir mydir myotherdir
zipdir() {
    for f in "$@"; do
        zip -r "$f" "$f"
    done
}

# lamp restart
lampr() {
    sudo systemctl restart httpd php-fpm mariadb
}

# lamp stop
lampstop() {
    sudo systemctl stop httpd php-fpm mariadb
}

# trim video - use: trim video.mp4 00:00:30 00:00:05 (filename, start timestamp, length of video)
trim() {
    ffmpeg -ss $2 -i "$1" -t $3 -vcodec copy -acodec copy "trimmed-$1"
}

# convert to webm - use: towebm inputfile.mp4 outputfilename
# (this is lossy, remove -lossless 0 to make it lossless)
towebm() {
    ffmpeg -i "$1" -lossless 0 "$2".webm
}

# get volume
vol() {
    amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }'
}

# increase volume
volup() {
    pactl set-sink-volume @DEFAULT_SINK@ +10%
}

# decrease volume
voldown() {
    pactl set-sink-volume @DEFAULT_SINK@ -10%
}

# bluetooth
bt() {
    if [ "$1" == 'start' ]; then # bluetooth on
        sudo systemctl start bluetooth
    elif [ "$1" == 'stop' ]; then # bluetooth off
        sudo systemctl stop bluetooth
    elif [ "$1" == 'enable' ]; then # bluetooth on on startup
        sudo systemctl enable bluetooth
    elif [ "$1" == 'disable' ]; then # bluetooth off on startup
        sudo systemctl disable bluetooth
    elif [ "$1" == 'status' ]; then # bluetooth status
        systemctl is-active bluetooth
    elif [ "$1" == 'devices' ]; then # found devices
        bluetoothctl devices
    elif [ "$1" == 'scan' ]; then # find new devices
        bluetoothctl scan on
    elif [ "$1" == 'connect' ]; then # connect by mac addr
        bluetoothctl connect "$2"
    elif [ "$1" == 'disconnect' ]; then # disconnect
        bluetoothctl disconnect "$2"
    elif [ "$1" == 'remove' ]; then # remove from found devices
        bluetoothctl remove "$2"
    elif [ "$1" == 'help' ]; then # help
        echo 'start'
        echo 'stop'
        echo 'enable'
        echo 'disable'
        echo 'status'
        echo 'devices'
        echo 'scan'
        echo 'connect'
        echo 'disconnect'
        echo 'remove'
    else
        echo 'unknown argument'
    fi
}

# wifi
wifi() {
    if [ "$1" == 'on' ]; then # turn wifi on
        nmcli r wifi on
    elif [ "$1" == 'off' ]; then # turn wifi off
        nmcli r wifi off
    elif [ "$1" == 'devices' ]; then # list network devices
        nmcli d
    elif [ "$1" == 'scan' ]; then # scan for wifi devices
        nmcli d wifi rescan
        nmcli d wifi list
    elif [ "$1" == 'connect' ]; then # connect to network
        read -p 'SSID: ' ssid
        read -sp 'Password: ' password
        echo
        nmcli d wifi connect "$ssid" password "$password"
    elif [ "$1" == 'disconnect' ]; then # disconnect from network
        nmcli c down id "$2"
    elif [ "$1" == 'status' ]; then # list active connections
        nmcli c s
    elif [ "$1" == 'gui' ]; then # open wifi gui
        detach gnome-control-center --search=wifi
    elif [ "$1" == 'help' ]; then # help
        echo 'on'
        echo 'off'
        echo 'devices'
        echo 'scan'
        echo 'connect'
        echo 'disconnect'
        echo 'status'
        echo 'gui'
    else
        echo 'unknown argument'
    fi
}

# general network commands
nw() {
    if [ "$1" = 'status' ]; then
        nmcli g status
    elif [ "$1" = 'hostname' ]; then
        nmcli g hostname
    elif [ "$1" = 'on' ]; then
        nmcli n on
    elif [ "$1" = 'off' ]; then
        nmcli n off
    elif [ "$1" = 'active' ]; then
        nmcli c show --active
    elif [ "$1" = 'devices' ]; then
        nmcli d status
    elif [ "$1" = 'help' ]; then
        echo 'status'
        echo 'hostname'
        echo 'on'
        echo 'off'
        echo 'active'
        echo 'devices'
    else
        echo 'unknown argument'
    fi
}

# battery
bat() {
    acpi -b
}

# make gtk theme work in flatpak apps
# install org.gtk.Gtk3theme.Plata-Noir-Compact
flatpakgtk() {
    for app in ~/.var/app/*; do
        echo "$app"
        gtkDir="$app/config/gtk-3.0"
        mkdir -p "$gtkDir"
        cp ~/.config/gtk-3.0/settings.ini "$gtkDir"
    done
}

# notifications pause/resume
nots() {
    if [ "$1" = 'resume' ]; then
        notify-send DUNST_COMMAND_RESUME
        echo 'notifications resumed'
    elif [ "$1" = "pause" ]; then
        notify-send DUNST_COMMAND_PAUSE
        echo 'notifications paused'
    elif [ "$1" = 'help' ]; then
        echo 'resume'
        echo 'pause'
    else
        echo 'unknown argument'
    fi
}

# prints ghosts
ghosts() {
    echo -e "$(colr 1)    ▄▄▄      $(colr 2)    ▄▄▄      $(colr 3)    ▄▄▄      $(colr 4)    ▄▄▄      $(colr 5)    ▄▄▄      $(colr 6)    ▄▄▄     "
    echo -e "$(colr 1)   ▀█▀██  ▄  $(colr 2)   ▀█▀██  ▄  $(colr 3)   ▀█▀██  ▄  $(colr 4)   ▀█▀██  ▄  $(colr 5)   ▀█▀██  ▄  $(colr 6)   ▀█▀██  ▄ "
    echo -e "$(colr 1) ▀▄██████▀   $(colr 2) ▀▄██████▀   $(colr 3) ▀▄██████▀   $(colr 4) ▀▄██████▀   $(colr 5) ▀▄██████▀   $(colr 6) ▀▄██████▀  "
    echo -e "$(colr 1)    ▀█████   $(colr 2)    ▀█████   $(colr 3)    ▀█████   $(colr 4)    ▀█████   $(colr 5)    ▀█████   $(colr 6)    ▀█████  "
    echo -e "$(colr 1)       ▀▀▀▀▄ $(colr 2)       ▀▀▀▀▄ $(colr 3)       ▀▀▀▀▄ $(colr 4)       ▀▀▀▀▄ $(colr 5)       ▀▀▀▀▄ $(colr 6)       ▀▀▀▀▄"
    echo
    echo -e "$(colr 9)    ▄▄▄      $(colr 10)    ▄▄▄      $(colr 11)    ▄▄▄      $(colr 12)    ▄▄▄      $(colr 13)    ▄▄▄      $(colr 14)    ▄▄▄     "
    echo -e "$(colr 9)   ▀█▀██  ▄  $(colr 10)   ▀█▀██  ▄  $(colr 11)   ▀█▀██  ▄  $(colr 12)   ▀█▀██  ▄  $(colr 13)   ▀█▀██  ▄  $(colr 14)   ▀█▀██  ▄ "
    echo -e "$(colr 9) ▀▄██████▀   $(colr 10) ▀▄██████▀   $(colr 11) ▀▄██████▀   $(colr 12) ▀▄██████▀   $(colr 13) ▀▄██████▀   $(colr 14) ▀▄██████▀  "
    echo -e "$(colr 9)    ▀█████   $(colr 10)    ▀█████   $(colr 11)    ▀█████   $(colr 12)    ▀█████   $(colr 13)    ▀█████   $(colr 14)    ▀█████  "
    echo -e "$(colr 9)       ▀▀▀▀▄ $(colr 10)       ▀▀▀▀▄ $(colr 11)       ▀▀▀▀▄ $(colr 12)       ▀▀▀▀▄ $(colr 13)       ▀▀▀▀▄ $(colr 14)       ▀▀▀▀▄"
    colr -1
}

# switch to dual monito support
dualmon() {
    sudo sh $docs/Linux/dual_monitor.sh
}

# snippets - for lack of a better term, general help with linux stuff
snippets() {
    detachx ghostwriter ~/.config/_snippets.md
}
